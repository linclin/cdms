// Code generated by mockery v1.0.0. DO NOT EDIT.

package run

import mock "github.com/stretchr/testify/mock"

// MockAction is an autogenerated mock type for the Action type
type MockAction struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *MockAction) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields: ctx, params
func (_m *MockAction) Run(ctx ExecuteContext, params interface{}) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(ExecuteContext, interface{}) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunAfter provides a mock function with given fields: ctx, params
func (_m *MockAction) RunAfter(ctx ExecuteContext, params interface{}) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(ExecuteContext, interface{}) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunBefore provides a mock function with given fields: ctx, params
func (_m *MockAction) RunBefore(ctx ExecuteContext, params interface{}) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(ExecuteContext, interface{}) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParameterNew provides a mock function with given fields:
func (_m *MockAction) ParameterNew() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// RetryBefore provides a mock function with given fields: ctx, params
func (_m *MockAction) RetryBefore(ctx ExecuteContext, params interface{}) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(ExecuteContext, interface{}) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
