package log

import mock "github.com/stretchr/testify/mock"

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg, fields
func (_m *MockLogger) Debug(msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// Debugf provides a mock function with given fields: msg, args
func (_m *MockLogger) Debugf(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: msg, fields
func (_m *MockLogger) Error(msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: msg, args
func (_m *MockLogger) Errorf(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: msg, fields
func (_m *MockLogger) Fatal(msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// Fatalf provides a mock function with given fields: msg, args
func (_m *MockLogger) Fatalf(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: msg, fields
func (_m *MockLogger) Info(msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: msg, args
func (_m *MockLogger) Infof(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: msg, fields
func (_m *MockLogger) Warn(msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// Warnf provides a mock function with given fields: msg, args
func (_m *MockLogger) Warnf(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}
